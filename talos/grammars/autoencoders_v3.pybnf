# GE keras autoencoder python grammar

<res> ::= encoder = Sequential(){::}encoder.add(Input(shape=(input_shape,), name="'input'")){::}<hidden_layers>{::}<latent_space>{::}model = get_model_from_encoder(encoder){::}model.add(Dense(input_shape, activation=<activation>, name="'output'")){::}model.compile(<optimizer>, <metric>)

<hidden_layers> ::= <Dense>{::} | <Dense>{::}<Dense>{::} | <hidden_layers><Dense>{::} | <Dense>{::}<extra>{::}

<Dense> ::= encoder.add(Dense(units = <digit>, activation = <activation>))

<DenseUnits> ::= 8 | 16 | 32 | 64 | 128 | 256 | 512

<activation> ::= "'relu'" | "'softplus'" | "'softsign'" | "'selu'" | "'elu'"

<latent_space> ::= encoder.add(Dense(units = <digit>, activation = <activation>, name="'latent'"))

<LatentUnits> ::= 2 | 4 | 8 | 16 | 32 | 64

<extra> ::= encoder.add(Dropout(rate=0.<digit>)){::} | encoder.add(BatchNormalization()){::} | encoder.add(Dropout(rate=0.<digit>)){::}encoder.add(BatchNormalization()){::}

<digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<optimizer> ::= "'RMSprop'" | "'Adam'" | "'Adadelta'" | "'Adagrad'" | "'Adamax'" | "'Nadam'" | "'Ftrl'"

<metric> ::= "'mse'" | "'mae'"
